var FLIM = 64;
var TLIM = 4;
var rate = 2400;
var factorial = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000, 304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000, 8222838654177922817725562880000000, 263130836933693530167218012160000000, 8683317618811886495518194401280000000, 295232799039604140847618609643520000000, 10333147966386144929666651337523200000000, 371993326789901217467999448150835200000000, 13763753091226345046315979581580902400000000, 523022617466601111760007224100074291200000000, 20397882081197443358640281739902897356800000000, 815915283247897734345611269596115894272000000000, 33452526613163807108170062053440751665152000000000, 1405006117752879898543142606244511569936384000000000, 60415263063373835637355132068513997507264512000000000, 2658271574788448768043625811014615890319638528000000000, 119622220865480194561963161495657715064383733760000000000, 5502622159812088949850305428800254892961651752960000000000, 258623241511168180642964355153611979969197632389120000000000, 12413915592536072670862289047373375038521486354677760000000000, 608281864034267560872252163321295376887552831379210240000000000, 30414093201713378043612608166064768844377641568960512000000000000, 1551118753287382280224243016469303211063259720016986112000000000000, 80658175170943878571660636856403766975289505440883277824000000000000, 4274883284060025564298013753389399649690343788366813724672000000000000, 230843697339241380472092742683027581083278564571807941132288000000000000, 12696403353658275925965100847566516959580321051449436762275840000000000000, 710998587804863451854045647463724949736497978881168458687447040000000000000, 40526919504877216755680601905432322134980384796226602145184481280000000000000, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 138683118545689835737939019720389406345902876772687432540821294940160000000000000, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 507580213877224798800856812176625227226004528988036003099405939480985600000000000000, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000];
var buf = new Buffer(jsarguments[1]);

var ins = new Array(rate);
var outs = new Array(rate);
var o = 0;
var q = 0;
var wform = "square";
var l = 1;

function range(a, d){
	var i=0;
	
	if (d<=0) return null;
    
	l = d/2;

	for (i=0;i<rate;i++) {
		ins[i] = Math.PI * (a + d/rate * i);
	}
}

function waveform(w) {
	wform = w;
}

function taylor(tay) {
	if (tay > TLIM) return null;
	q = tay;
}

function fourier(fou) {
	if (fou > FLIM) return null;
	o = fou;
}

function wavecalc() {
	var calcfun;							
	switch(wform) {
        case "square":
            calcfun = fouriersquare;
            break;
        case "saw":
            calcfun = fouriersaw;
            break;
        case "tri":
            calcfun = fouriertri;
            break;
        default:
            return null;
    }

	var h=0;
	
	for (var i=0;i<rate;i++) {
		var temp = calcfun(ins[i]); 
		h = Math.max(Math.abs(temp), h);		//for scaling
		outs[i] = temp;
	}
	for (var i=0;i<rate;i++) {
		outs[i] = 0.5+(outs[i]/h)*0.5;
	}											//end of scaling

	outlet(0, outs);
}

function apply_wave() {
	buf.poke(1, 0, outs);
}


function fouriersquare(x) {
	var i=0;
	var y=0;
	var elements = new Array(o+1);
	for (i=0;i<=o;i++) {
		elements[i] = (4/Math.PI)*taylorsine((2*i+1)*x)/(2*i+1);
	}
	for (i=0;i<=o;i++) {
		y += elements[i];
	}
	return y;
}

function fouriersaw(x) {
	var i=0;
	var y=0;
	var elements = new Array(o+1);
	for (i=0;i<=o;i++) {
		elements[i] = taylorsine((i+1)*x)/((i+1)*Math.PI);			
	}
	for (i=0;i<=o;i++) {
		y += elements[i];
	}
    y = 0 - y;
	return y;
}

function fouriertri(x) {
	var i=0;
	var y=0;
	var elements = new Array(o+1);
	for (i=0;i<=o;i++) {
		elements[i] = (8/Math.pow(Math.PI, 2))*(Math.pow(-1, i)/Math.pow((2*i+1), 2))*taylorsine((2*i+1)*x);		
	}
	for (i=0;i<=o;i++) {
		y += elements[i];
	}
	return y;
}

function taylorsine(n) {
	var i=0;
	var y=0;
	var times, abs, sign, transposition, x = 0;
	var elements = new Array(q+1);
	
	sign = (n >= 0) ? 1 : -1;
	
	//riporto n nell'intervallo [0,2p]
	abs = Math.abs(n);
	times = Math.floor(abs/(Math.PI));				
	transposition = times+(times%2);
	x = sign*(abs-transposition*Math.PI);
	
	for (i=0;i<=q;i++) {
		elements[i] = Math.pow(-1, i)*Math.pow(x, 2*i+1)/factorial[2*i+1];
	}
	for (i=0;i<=q;i++) {
		y += elements[i];
	}
	return y;
}